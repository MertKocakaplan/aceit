generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                    @id @default(uuid())
  email             String                    @unique
  username          String                    @unique
  password          String
  fullName          String
  examType          ExamType
  targetScore       Int?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  lastLoginAt       DateTime?
  targetDate        DateTime?
  dailyStudyGoal    Int?
  role              UserRole                  @default(USER)
  learningVelocity  Float                     @default(1.0)
  aiQuestions       AIQuestionLog[]
  examAttempts      ExamAttempt[]
  pomodoroSessions  PomodoroSession[]
  goals             StudyGoal[]
  studyPlans        StudyPlan[]
  studySessions     StudySession[]
  achievements      UserAchievement[]
  preferences       UserPreference?
  recommendations   UserTopicRecommendation[]
  spacedRepetitions UserTopicSpacedRepetition[]

  @@index([email])
  @@index([examType])
  @@map("User")
}

model UserPreference {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  pomodoroLongBreak       Int       @default(15)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  notifications           Boolean   @default(true)
  pomodoroBreak           Int       @default(5)
  pomodoroWork            Int       @default(25)
  soundEnabled            Boolean   @default(true)
  theme                   ThemeMode @default(SYSTEM)
  dailyStudyHoursTarget   Int       @default(4)
  preferredStudyStartHour Int?
  preferredStudyEndHour   Int?
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserPreference")
}

model StudySession {
  id               String   @id @default(uuid())
  userId           String
  subjectId        String
  topicId          String?
  date             DateTime @default(now())
  duration         Int
  questionsCorrect Int      @default(0)
  questionsWrong   Int      @default(0)
  questionsEmpty   Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  notes            String?
  subject          Subject  @relation(fields: [subjectId], references: [id])
  topic            Topic?   @relation(fields: [topicId], references: [id])
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([subjectId])
  @@map("StudySession")
}

model Subject {
  id               String            @id @default(uuid())
  name             String
  code             String            @unique
  examType         ExamType
  color            String            @default("#3b82f6")
  createdAt        DateTime          @default(now())
  examResults      ExamResult[]
  examTopics       ExamTopic[]
  pomodoroSessions PomodoroSession[]
  studySessions    StudySession[]
  studyPlanSlots   StudyPlanSlot[]
  topics           Topic[]

  @@index([examType])
  @@map("Subject")
}

model Topic {
  id                  String                      @id @default(uuid())
  subjectId           String
  name                String
  order               Int                         @default(0)
  createdAt           DateTime                    @default(now())
  code                String
  averageQuestions    Float?
  importanceScore     Float?
  difficultyLevel     Int                         @default(3)
  updatedAt           DateTime                    @updatedAt
  examTopics          ExamTopic[]
  studySessions       StudySession[]
  studyPlanSlots      StudyPlanSlot[]
  subject             Subject                     @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questionCounts      TopicQuestionCount[]
  userRecommendations UserTopicRecommendation[]
  spacedRepetitions   UserTopicSpacedRepetition[]

  @@unique([subjectId, code])
  @@index([subjectId])
  @@map("Topic")
}

model ExamData {
  id          String      @id @default(uuid())
  examType    ExamType    @unique
  year        Int
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  examTopics  ExamTopic[]

  @@map("ExamData")
}

model ExamTopic {
  id            String   @id @default(uuid())
  examDataId    String
  subjectId     String
  topicId       String?
  outcome       String
  weight        Float
  questionCount Int      @default(0)
  createdAt     DateTime @default(now())
  examData      ExamData @relation(fields: [examDataId], references: [id], onDelete: Cascade)
  subject       Subject  @relation(fields: [subjectId], references: [id])
  topic         Topic?   @relation(fields: [topicId], references: [id])

  @@index([examDataId])
  @@index([subjectId])
  @@map("ExamTopic")
}

model ExamYear {
  id         String               @id @default(uuid())
  year       Int                  @unique
  examDate   DateTime?
  isActive   Boolean              @default(false)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  topicStats TopicQuestionCount[]

  @@map("ExamYear")
}

model TopicQuestionCount {
  id            String   @id @default(uuid())
  topicId       String
  examYearId    String
  questionCount Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  examYear      ExamYear @relation(fields: [examYearId], references: [id], onDelete: Cascade)
  topic         Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([topicId, examYearId])
  @@index([topicId])
  @@index([examYearId])
  @@map("TopicQuestionCount")
}

model UserTopicRecommendation {
  id                 String   @id @default(uuid())
  userId             String
  topicId            String
  priorityScore      Float
  reason             String
  recommendedMinutes Int
  lastCalculated     DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  topic              Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([userId, priorityScore])
  @@map("UserTopicRecommendation")
}

model ExamAttempt {
  id             String       @id @default(uuid())
  userId         String
  examType       String
  examName       String
  attemptDate    DateTime
  totalNet       Float
  estimatedRank  Int?
  estimatedScore Float?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  examResults    ExamResult[]

  @@index([userId, attemptDate])
  @@map("ExamAttempt")
}

model ExamResult {
  id            String      @id @default(uuid())
  examAttemptId String
  subjectId     String
  correct       Int
  wrong         Int
  empty         Int
  net           Float
  targetNet     Float?
  createdAt     DateTime    @default(now())
  examAttempt   ExamAttempt @relation(fields: [examAttemptId], references: [id], onDelete: Cascade)
  subject       Subject     @relation(fields: [subjectId], references: [id])

  @@index([examAttemptId])
  @@index([subjectId])
  @@map("ExamResult")
}

model StudyPlan {
  id            String         @id @default(uuid())
  userId        String
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean        @default(true)
  isAIGenerated Boolean        @default(false)
  aiExplanation String?        @db.Text
  weeklyGoals   String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  days          StudyPlanDay[]

  @@index([userId, isActive])
  @@map("StudyPlan")
}

model StudyPlanDay {
  id               String          @id @default(uuid())
  planId           String
  date             DateTime
  dayNote          String?
  dailyGoalMinutes Int?
  createdAt        DateTime        @default(now())
  plan             StudyPlan       @relation(fields: [planId], references: [id], onDelete: Cascade)
  slots            StudyPlanSlot[]

  @@unique([planId, date])
  @@index([planId, date])
  @@map("StudyPlanDay")
}

model StudyPlanSlot {
  id          String       @id @default(uuid())
  dayId       String
  subjectId   String
  topicId     String?
  startTime   String
  endTime     String
  duration    Int
  priority    Int          @default(3)
  slotType    String       @default("study")
  isCompleted Boolean      @default(false)
  completedAt DateTime?
  notes       String?
  aiReason    String?      @db.Text
  createdAt   DateTime     @default(now())
  day         StudyPlanDay @relation(fields: [dayId], references: [id], onDelete: Cascade)
  subject     Subject      @relation(fields: [subjectId], references: [id])
  topic       Topic?       @relation(fields: [topicId], references: [id])

  @@index([dayId, startTime])
  @@map("StudyPlanSlot")
}

model StudyGoal {
  id           String    @id @default(uuid())
  userId       String
  title        String
  description  String?
  targetValue  Int
  currentValue Int       @default(0)
  unit         String
  deadline     DateTime?
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isCompleted])
  @@map("StudyGoal")
}

model PomodoroSession {
  id          String   @id @default(uuid())
  userId      String
  date        DateTime @default(now())
  duration    Int
  isCompleted Boolean  @default(true)
  createdAt   DateTime @default(now())
  mode        String
  subjectId   String?
  subject     Subject? @relation(fields: [subjectId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@map("PomodoroSession")
}

model AIQuestionLog {
  id            String   @id @default(uuid())
  userId        String
  questionText  String
  questionImage String?
  aiResponse    String
  aiModel       String
  rating        Int?
  tokensUsed    Int?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("AIQuestionLog")
}

model Achievement {
  id               String            @id @default(uuid())
  code             String            @unique
  name             String
  description      String
  icon             String
  category         String
  condition        String
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("Achievement")
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@map("UserAchievement")
}

model UserTopicSpacedRepetition {
  id                 String   @id @default(uuid())
  userId             String
  topicId            String
  lastStudiedAt      DateTime
  nextReviewAt       DateTime
  repetitionLevel    Int      @default(0)
  easinessFactor     Float    @default(2.5)
  consecutiveCorrect Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  topic              Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@index([userId, nextReviewAt])
  @@index([nextReviewAt])
  @@map("UserTopicSpacedRepetition")
}

enum ExamType {
  LGS
  TYT
  AYT
  AYT_MATEMATIK
  AYT_GEOMETRI
  AYT_FIZIK
  AYT_KIMYA
  AYT_BIYOLOJI
  AYT_EDEBIYAT
  AYT_TARIH
  AYT_COGRAFYA
  AYT_FELSEFE
  AYT_DIN
  YKS_SAYISAL
  YKS_ESIT_AGIRLIK
  YKS_SOZEL
  YKS_DIL
}

enum UserRole {
  USER
  ADMIN
}

enum ThemeMode {
  LIGHT
  DARK
  SYSTEM
}